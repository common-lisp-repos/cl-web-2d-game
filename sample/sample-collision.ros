#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
;;; vim: set ft=lisp lisp:

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:ps-experiment
                              :cl-ps-ecs
                              :cl-web-2d-game
                              :ningle
                              :cl-markup
                              :clack)
                            :silent t))

(defpackage :ros.script.sample-collision
  (:use :cl
        :cl-markup
        :cl-ps-ecs
        :ps-experiment
        :cl-web-2d-game))
(in-package :ros.script.sample-collision)

;; --- Definitions about directories --- ;;

(defvar *script-dir*
  (merge-pathnames "sample/"
                   (asdf:component-pathname
                    (asdf:find-system :cl-web-2d-game))))

(defvar *js-relative-dir* "js/")

(defvar *downloaded-js-dir*
  (merge-pathnames *js-relative-dir* *script-dir*))

;; --- Parenscript program --- ;;

(defvar.ps+ *screen-width* 800)
(defvar.ps+ *screen-height* 600)

(defvar *js-game-file*
  (merge-pathnames "sample.js" *downloaded-js-dir*))

(defun.ps+ add-mouse-pointer ()
  (let ((pointer (make-ecs-entity))
        (point (make-point-2d))
        (r 30))
    (add-ecs-component-list
     pointer
     point
     (make-script-2d :func (lambda (entity)
                             (declare (ignore entity))
                             (with-slots (x y) point
                               (setf x (get-mouse-x))
                               (setf y (get-mouse-y)))))
     (make-physic-circle :r r))
    (add-ecs-entity pointer)))

(defstruct.ps+ collider-generator
    tag target-tag min-r max-r
    interval
    circle-p num-vertices
    up-to-down-p)

(defvar.ps+ *generator-from-up*
    (make-collider-generator
     :tag :a :target-tag :b
     :min-r 20 :max-r 40
     :interval 40
     :circle-p t :num-vertices 10
     :up-to-down-p t))

(defvar.ps+ *generator-from-down*
    (make-collider-generator
     :tag :b :target-tag :a
     :min-r 20 :max-r 40
     :interval 40
     :circle-p t :num-vertices 10
     :up-to-down-p nil))

(defvar.ps+ *collider-speed* 3)

;; The following should be reported and fixed.
;; (ps:ps (random 1.0))
;;  -> "Math.floor(1.0 * Math.random());"
(defun.ps random1 () (random))
(defun random1 () (random 1.0))

;; TODO: Implement (not circle-p) case
(defun.ps+ add-a-collider (generator)
  (with-slots (min-r max-r up-to-down-p
                     tag target-tag)
      generator
    (let* ((entity (make-ecs-entity))
           (r (+ min-r (* max-r (random1))))
           (model (make-model-2d :model (make-solid-circle :r r :color #x888888)
                                 :depth 0))
           (collide-p nil)
           (point (make-point-2d :x (* *screen-width* (random1))
                                 :y (if up-to-down-p
                                        (+ *screen-height* r)
                                        (* r -1))))
           (speed-abs *collider-speed*))
      (add-ecs-component-list
       entity
       point
       (make-physic-circle :r r
                           :target-tags (list target-tag)
                           :on-collision (lambda (mine target)
                                           (declare (ignore mine target))
                                           (setf collide-p t)))
       (make-script-2d :func (lambda (entity)
                               (with-slots (y) point
                                 (incf (point-2d-y point)
                                       (* speed-abs (if up-to-down-p -1 1)))
                                 (when (or (< y (* r -1 5))
                                           (> y (+ *screen-height* (* r 5))))
                                   (register-next-frame-func
                                    (lambda () (delete-ecs-entity entity)))))
                               (if collide-p
                                   (progn (setf collide-p nil)
                                          (enable-model-2d entity :target-model-2d model))
                                   (disable-model-2d entity :target-model-2d model))))
       model)
      (add-entity-tag entity tag)
      (add-ecs-entity entity))))

(defun.ps+ add-colliders ()
  (labels ((rec (generator)
             (with-slots (interval) generator
               (register-nframes-after-func
                (lambda ()
                  (add-a-collider generator)
                  (rec generator))
                interval))))
    (rec *generator-from-up*)
    (rec *generator-from-down*)))

(defun.ps+ init-func (scene)
  (init-gui)
  (init-input)
  (add-mouse-pointer)
  (add-colliders)
  (add-panel-bool 'display-collider-model t
                  :on-change (lambda (value)
                               (setf-collider-model-enable value)))
  (init-default-systems :scene scene))

(defun.ps count-to-string (count-a count-b)
  (+ "↓: " count-a ", ↑: " count-b))

(defun.ps+ monitor-collider-count ()
  (let ((count-a 0)
        (count-b 0))
    (do-ecs-entities entity
      (cond ((has-entity-tag entity :a) (incf count-a))
            ((has-entity-tag entity :b) (incf count-b))))
    (add-to-monitoring-log (count-to-string count-a count-b))))

(defun.ps+ update-func ()
  (monitor-collider-count))

;; --- Make js main file --- ;;

(defun make-js-main-file ()
  (with-open-file (out *js-game-file*
                       :direction :output
                       :if-exists :supersede
                       :if-does-not-exist :create)
    (princ
     (pse:with-use-ps-pack (:this)
       (let ((width *screen-width*)
             (height *screen-height*))
         (start-2d-game :screen-width width
                        :screen-height height
                        :camera (init-camera 0 0 width height)
                        :rendered-dom (document.query-selector "#renderer")
                        :stats-dom (document.query-selector "#stats-output")
                        :monitoring-log-dom (document.query-selector "#monitor")
                        :event-log-dom (document.query-selector "#eventlog")
                        :init-function init-func
                        :update-function update-func)))
     out)))

;; --- Server --- ;;

(defvar *app* (make-instance 'ningle:<app>))

(defvar *server* nil)

(setf (ningle:route *app* "/" :method :GET)
      (lambda (params)
        (declare (ignorable params))
        (make-js-main-file)
        (with-output-to-string (str)
          (let ((cl-markup:*output-stream* str))
            (html5 (:head
                    (:title "test")
                    (dolist (js-src (make-src-list-for-script-tag *js-relative-dir*))
                      (markup (:script :src js-src nil))))
                   (:body
                    (:div :id "stats-output")
                    (:div :id "renderer" nil)
                    (:div :id "monitor" "(for Monitoring Log)")
                    (:div (:pre :id "eventlog" "(for Event Log)"))
                    (:script :src "js/sample.js" nil)))))))

(defun stop ()
  (when *server*
    (clack:stop *server*)
    (setf *server* nil)))

(defun run (&key (port 5000))
  (ensure-js-files *downloaded-js-dir*)
  (stop)
  (setf *server*
        (clack:clackup
         (lack:builder
          (:static :path (lambda (path)
                           (print path)
                           (if (ppcre:scan "^(?:/images/|/css/|/js/|/robot\\.txt$|/favicon\\.ico$)"
                                           path)
                               path
                               nil))
                   :root *script-dir*)
          *app*)
         :port port)))

;; --- Roswell script main --- ;;

(defun main (&rest argv)
  (declare (ignorable argv))
  (run :port 16896)
  (princ "--- Press enter key to stop ---")
  (peek-char)
  (stop))
