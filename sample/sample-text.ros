#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
;;; vim: set ft=lisp lisp:

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:ps-experiment
                              :cl-ps-ecs
                              :cl-web-2d-game
                              :ningle
                              :cl-markup
                              :clack)
                            :silent t))

(defpackage :ros.script.sample-text
  (:use :cl
        :cl-markup
        :cl-ps-ecs
        :ps-experiment
        :cl-web-2d-game))
(in-package :ros.script.sample-text)

;; --- Definitions about directories --- ;;

(defvar *script-dir*
  (merge-pathnames "sample/"
                   (asdf:component-pathname
                    (asdf:find-system :cl-web-2d-game))))

(defvar.ps+ *js-relative-dir* "js/")

(defvar *downloaded-js-dir*
  (merge-pathnames *js-relative-dir* *script-dir*))

;; --- Parenscript program --- ;;

(defvar *js-game-file*
  (merge-pathnames "sample.js" *downloaded-js-dir*))

(defvar.ps+ *text-adding-interval* 30)
(defvar.ps+ *text-color-list*
    '(("abcd2" #xff0000)
      ("test" #x00ff00)
      ("-- end --" #x0000ff)))

(defun.ps+ add-sample-text (text-area)
  (let ((lst (get-entity-param text-area :text-color-list)))
    (if (> (length lst) 0)
        (let* ((first (car lst))
               (text (car first))
               (color (cadr first)))
          (add-text-to-area text-area
                            :text text
                            :color color)
          (set-entity-param text-area :text-color-list
                            (cdr lst)))
        (progn (clear-text-area text-area)
               (set-entity-param text-area :text-color-list
                                 *text-color-list*)))))

(defun.ps+ process-adding-text (text-area)
  (let ((rest-intv (get-entity-param text-area :rest-intv)))
    (when (<= rest-intv 0)
      (add-sample-text text-area))
    (set-entity-param text-area :rest-intv
                      (if (> rest-intv 0) (1- rest-intv) *text-adding-interval*))))

(defun.ps+ add-sample-text-area (&key x y align)
  (let ((text-area (make-text-area :font-size 25 :text-align align
                                   :margin 10
                                   :x x :y y)))
    (add-ecs-component-list
     text-area
     (make-script-2d :func #'process-adding-text)
     (init-entity-params :rest-intv *text-adding-interval*
                         :text-color-list *text-color-list*))
    (add-ecs-entity text-area)))

(defun.ps+ init-func (scene)
  (set-console-log-level :debug)
  (load-font *js-relative-dir*)
  (add-sample-text-area :x 50 :y 400 :align :left)
  (add-sample-text-area :x 300 :y 400 :align :center)
  (add-sample-text-area :x 550 :y 400 :align :right)
  (init-default-systems :scene scene))

(defun.ps+ update-func ()
  (do-ecs-entities entity
    (add-to-monitoring-log (ecs-entity-id entity))))

;; --- Make js main file --- ;;

(defun make-js-main-file ()
  (with-open-file (out *js-game-file*
                       :direction :output
                       :if-exists :supersede
                       :if-does-not-exist :create)
    (princ
     (pse:with-use-ps-pack (:this)
       (let ((width 640)
             (height 480))
         (start-2d-game :screen-width width
                        :screen-height height
                        :camera (init-camera 0 0 width height)
                        :rendered-dom (document.query-selector "#renderer")
                        :stats-dom (document.query-selector "#stats-output")
                        :monitoring-log-dom (document.query-selector "#monitor")
                        :event-log-dom (document.query-selector "#eventlog")
                        :init-function init-func
                        :update-function update-func)))
     out)))

;; --- Server --- ;;

(defvar *app* (make-instance 'ningle:<app>))

(defvar *server* nil)

(setf (ningle:route *app* "/" :method :GET)
      (lambda (params)
        (declare (ignorable params))
        (make-js-main-file)
        (with-output-to-string (str)
          (let ((cl-markup:*output-stream* str))
            (html5 (:head
                    (:title "test")
                    (dolist (js-src (make-src-list-for-script-tag *js-relative-dir*))
                      (markup (:script :src js-src nil))))
                   (:body
                    (:div :id "stats-output")
                    (:div :id "renderer" nil)
                    (:div :id "monitor" "(for Monitoring Log)")
                    (:div (:pre :id "eventlog" "(for Event Log)"))
                    (:script :src "js/sample.js" nil)))))))

(defun stop ()
  (when *server*
    (clack:stop *server*)
    (setf *server* nil)))

(defun run (&key (port 5000))
  (ensure-js-files *downloaded-js-dir*)
  (stop)
  (setf *server*
        (clack:clackup
         (lack:builder
          (:static :path (lambda (path)
                           (print path)
                           (if (ppcre:scan "^(?:/images/|/css/|/js/|/robot\\.txt$|/favicon\\.ico$)"
                                           path)
                               path
                               nil))
                   :root *script-dir*)
          *app*)
         :port port
         :use-thread nil)))

;; --- Roswell script main --- ;;

(defun main (&rest argv)
  (declare (ignorable argv))
  (run :port 16896)
  (princ "--- Press enter key to stop ---")
  (peek-char)
  (stop))
